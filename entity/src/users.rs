//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub surname: String,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub password_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub salt: Vec<u8>,
    pub telegram_nick: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::students_and_groups::Entity")]
    StudentsAndGroups,
    #[sea_orm(has_many = "super::students_individual_work::Entity")]
    StudentsIndividualWork,
    #[sea_orm(has_many = "super::users_projects_roles::Entity")]
    UsersProjectsRoles,
}

impl Related<super::students_and_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentsAndGroups.def()
    }
}

impl Related<super::students_individual_work::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentsIndividualWork.def()
    }
}

impl Related<super::users_projects_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersProjectsRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
