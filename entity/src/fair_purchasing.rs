//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "fair_purchasing")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub date_of_purchase: Option<DateTime>,
    pub fair_id: i32,
    pub purchased_component_id: i32,
    pub purchasing_group_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fair::Entity",
        from = "Column::FairId",
        to = "super::fair::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Fair,
    #[sea_orm(
        belongs_to = "super::groups::Entity",
        from = "Column::PurchasingGroupId",
        to = "super::groups::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Groups,
    #[sea_orm(
        belongs_to = "super::groups_and_project_components::Entity",
        from = "Column::PurchasedComponentId",
        to = "super::groups_and_project_components::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    GroupsAndProjectComponents,
}

impl Related<super::fair::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fair.def()
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::groups_and_project_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsAndProjectComponents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
