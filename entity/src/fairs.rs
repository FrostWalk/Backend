//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "fairs")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub start_date: Option<DateTime>,
    pub end_date: Option<DateTime>,
    pub project_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::fairs_purchasing::Entity")]
    FairsPurchasing,
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::ProjectId",
        to = "super::projects::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Projects,
}

impl Related<super::fairs_purchasing::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FairsPurchasing.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
