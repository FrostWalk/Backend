//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema,
)]
#[sea_orm(table_name = "group_part_selections")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub group_part_selection_id: i32,
    pub group_id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub link: String,
    #[sea_orm(column_type = "Text")]
    pub markdown_text: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::groups::Entity",
        from = "Column::GroupId",
        to = "super::groups::Column::GroupId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Groups,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
