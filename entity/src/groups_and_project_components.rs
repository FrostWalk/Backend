//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "groups_and_project_components")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub group_id: i64,
    pub component_id: i64,
    pub custom_name: String,
    pub flyer_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub code_link: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub telegram_support_link: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(belongs_to = "super::groups::Entity", from = "Column::GroupId", to = "super::groups::Column::Id", on_update = "NoAction", on_delete = "Cascade")]
    Groups,
    #[sea_orm(belongs_to = "super::project_components::Entity", from = "Column::ComponentId", to = "super::project_components::Column::Id", on_update = "NoAction", on_delete = "Cascade")]
    ProjectComponents,
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::project_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectComponents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
