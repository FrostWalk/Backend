//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema,
)]
#[sea_orm(table_name = "projects")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub project_id: i32,
    pub name: String,
    pub year: i32,
    pub max_student_uploads: i32,
    pub max_group_size: i32,
    pub active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::fairs::Entity")]
    Fairs,
    #[sea_orm(has_many = "super::group_components::Entity")]
    GroupComponents,
    #[sea_orm(has_many = "super::group_parts::Entity")]
    GroupParts,
    #[sea_orm(has_many = "super::groups::Entity")]
    Groups,
    #[sea_orm(has_many = "super::security_codes::Entity")]
    SecurityCodes,
    #[sea_orm(has_many = "super::student_parts::Entity")]
    StudentParts,
    #[sea_orm(has_many = "super::students_components::Entity")]
    StudentsComponents,
}

impl Related<super::fairs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fairs.def()
    }
}

impl Related<super::group_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupComponents.def()
    }
}

impl Related<super::group_parts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupParts.def()
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::security_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecurityCodes.def()
    }
}

impl Related<super::student_parts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentParts.def()
    }
}

impl Related<super::students_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentsComponents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
