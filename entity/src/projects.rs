//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "projects")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub year: i16,
    pub max_group_size: i16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::groups::Entity")]
    Groups,
    #[sea_orm(has_many = "super::individual_work_options::Entity")]
    IndividualWorkOptions,
    #[sea_orm(has_many = "super::project_components::Entity")]
    ProjectComponents,
    #[sea_orm(has_many = "super::security_codes::Entity")]
    SecurityCodes,
    #[sea_orm(has_many = "super::users_projects_and_roles::Entity")]
    UsersProjectsAndRoles,
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::individual_work_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IndividualWorkOptions.def()
    }
}

impl Related<super::project_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectComponents.def()
    }
}

impl Related<super::security_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecurityCodes.def()
    }
}

impl Related<super::users_projects_and_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersProjectsAndRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
