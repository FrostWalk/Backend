//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "options_components_and_quantity")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub option_id: i64,
    pub component_id: i64,
    pub quantity: i16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::project_components::Entity",
        from = "Column::ComponentId",
        to = "super::project_components::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ProjectComponents,
    #[sea_orm(
        belongs_to = "super::project_options::Entity",
        from = "Column::OptionId",
        to = "super::project_options::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ProjectOptions,
}

impl Related<super::project_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectComponents.def()
    }
}

impl Related<super::project_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectOptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
