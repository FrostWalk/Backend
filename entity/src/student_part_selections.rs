//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "student_part_selections")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub student_part_selection_id: i32,
    pub student_id: i32,
    pub student_part_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::student_parts::Entity",
        from = "Column::StudentPartId",
        to = "super::student_parts::Column::StudentPartId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    StudentParts,
    #[sea_orm(has_many = "super::student_uploads::Entity")]
    StudentUploads,
    #[sea_orm(
        belongs_to = "super::students::Entity",
        from = "Column::StudentId",
        to = "super::students::Column::StudentId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Students,
}

impl Related<super::student_parts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentParts.def()
    }
}

impl Related<super::student_uploads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentUploads.def()
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Students.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
