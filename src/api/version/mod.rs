use actix_web::{HttpResponse, Result};
use serde::Serialize;
use std::time::{SystemTime, UNIX_EPOCH};
use utoipa::ToSchema;

// Include the build info generated by build.rs
include!(concat!(env!("OUT_DIR"), "/build_info.rs"));

#[derive(Serialize, ToSchema)]
pub struct VersionResponse {
    pub version: String,
    pub git_tag: String,
    pub git_commit: String,
    pub build_time: String,
    pub rust_version: String,
    pub timestamp: u64,
}

/// Version information endpoint
///
/// This endpoint provides comprehensive version information including:
/// - Application version from Cargo.toml
/// - Git tag (if available)
/// - Git commit hash
/// - Build timestamp
/// - Rust compiler version
#[utoipa::path(
    get,
    path = "/version",
    tag = "Version",
    responses(
        (status = 200, description = "Version information", body = VersionResponse)
    ),
    summary = "Get application version information",
    description = "Returns comprehensive version information including git tag, commit hash, and build details"
)]
pub async fn version_info() -> Result<HttpResponse> {
    let timestamp = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap_or_default()
        .as_secs();

    let version_response = VersionResponse {
        version: env!("CARGO_PKG_VERSION").to_string(),
        git_tag: GIT_TAG.to_string(),
        git_commit: GIT_COMMIT.to_string(),
        build_time: BUILD_TIME.to_string(),
        rust_version: RUSTC_VERSION.to_string(),
        timestamp,
    };

    Ok(HttpResponse::Ok().json(version_response))
}
